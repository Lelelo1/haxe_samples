// Generated by Haxe 4.2.1+bf9ff69
#ifndef INCLUDED_xa3_Csv
#define INCLUDED_xa3_Csv

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(xa3,Csv)
HX_DECLARE_CLASS1(xa3,QuoteCells)

namespace xa3{


class HXCPP_CLASS_ATTRIBUTES Csv_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Csv_obj OBJ_;
		Csv_obj();

	public:
		enum { _hx_ClassId = 0x33b4fda0 };

		void __construct(::String name,::Array< ::String > columnNames, ::haxe::ds::StringMap columnMap,::Array< ::Dynamic> lines);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="xa3.Csv")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"xa3.Csv"); }
		static ::hx::ObjectPtr< Csv_obj > __new(::String name,::Array< ::String > columnNames, ::haxe::ds::StringMap columnMap,::Array< ::Dynamic> lines);
		static ::hx::ObjectPtr< Csv_obj > __alloc(::hx::Ctx *_hx_ctx,::String name,::Array< ::String > columnNames, ::haxe::ds::StringMap columnMap,::Array< ::Dynamic> lines);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Csv_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Csv",a6,3b,33,00); }

		static void __boot();
		static ::String CHARCODE_NEWLINE;
		static ::String CR;
		static  ::xa3::Csv fromString(::String name,::String content, ::xa3::QuoteCells quoteCells,::String inputDelimiter);
		static ::Dynamic fromString_dyn();

		static  ::xa3::Csv fromColumnAndStringArrays(::String name,::Array< ::String > columnNames,::Array< ::Dynamic> decodedLines,::String inputDelimiter);
		static ::Dynamic fromColumnAndStringArrays_dyn();

		static  ::xa3::Csv fromCsvRecords(::Array< ::Dynamic> records,::String name,::hx::Null< bool >  trimCells);
		static ::Dynamic fromCsvRecords_dyn();

		static ::Array< ::Dynamic> fromFiles( ::haxe::ds::StringMap files);
		static ::Dynamic fromFiles_dyn();

		static ::Array< ::Dynamic> filterEmptyLines(::Array< ::Dynamic> lines);
		static ::Dynamic filterEmptyLines_dyn();

		static ::Array< ::Dynamic> decode(::String s, ::xa3::QuoteCells quoteCells,::String delimiter,::hx::Null< bool >  trimCells);
		static ::Dynamic decode_dyn();

		static ::String encode(::Array< ::Dynamic> a,::String delimiter);
		static ::Dynamic encode_dyn();

		static ::String detectDelimiter(::String s);
		static ::Dynamic detectDelimiter_dyn();

		::String name;
		::Array< ::String > columnNames;
		 ::haxe::ds::StringMap columnMap;
		::Array< ::Dynamic> lines;
		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace xa3

#endif /* INCLUDED_xa3_Csv */ 
